[pytest]
# Pytest configuration for Scribe project

# Test discovery patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output options
addopts = 
    -v
    --strict-markers
    --tb=short
    --cov=scribe
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=80
    -p no:warnings
    --asyncio-mode=auto
    --ignore=tests/legacy
    --ignore=tests/test_direct_srt.py
    --ignore=tests/test_evaluate.py
    --ignore=tests/test_enhanced_hebrew_evaluation.py

# Markers for test categorization
markers =
    unit: Unit tests for individual functions/methods
    integration: Integration tests for multiple components
    slow: Tests that take longer than 1 second
    external: Tests that require external services (API calls)
    database: Tests that interact with the database
    async: Tests for async functions
    hebrew: Tests specific to Hebrew language functionality

# Test timeout (seconds)
timeout = 300

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage exclusions
[coverage:run]
source = scribe
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */.venv/*
    */utilities/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
